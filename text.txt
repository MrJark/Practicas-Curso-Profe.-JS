- SCOPE
Hay 4 tipos de Scope(es o que define el tiempo de vida de una variable y donde se puede ejecutar)
    1. Global: Variables disponibles de forma global se usa la palabra var, son accesibles por todos los scripts que se cargan en la página y se declaran fuera de una función o bloque. Aquí hay mucho riesgo de sobreescritura.
    2. Function: Variables declaradas dentro de una función utilizando var sólo visibles dentro de ella misma (incluyendo los argumentos que se pasan a la función).
    3. Block: Variables definidas dentro de un bloque, por ejemplo variables declaradas dentro un loop while o for. Se usa let y const para declarar este tipo de variables.
    4. Module: Cuando se denota un script de tipo module con el atributo type="module" las variables son limitadas al archivo en el que están declaradas.

- CLOUSURES

[ IIFE (immediately invoked function expression)
se le llama de la siguiente manera:
    (function (){
        //function Scope//
        let color = 'green'
    })();
Este tipo de function se usan por motivos de privacidad en versines anteriores pero ahora con let y const  es necesarioy no debo usarlo ]

"use strict"
lo usamos para evitar errores de una forma temprana, durante el desarrollo.

- PARSERS Y ABSTRACT SYNTAX TREE
El JS Engine recibe el código fuente y lo procesa de la siguiente manera:

- El parser descompone y crea tokens que integran el AST.
- Se compila a bytecode y se ejecuta.
- Lo que se pueda se optimiza a machine code y se reemplaza el código base.

Un SyntaxError es lanzado cuando el motor JavaScript encuentra partes que no forman parte de la sintaxis del lenguaje y esto lo logra gracias a que se tiene un AST generado por el parser.

El parser es del 15% al 20% del proceso de ejecución por lo que hay que usar parser del código justo en el momento que lo necesitamos y no antes de saber si se va a usar o no.

- EVENT LOOPS

El Event Loop hace que Javascript parezca ser multihilo a pesar de que corre en un solo proceso.

Javascript se organiza usando las siguientes estructuras de datos:

- Stack. Va apilando de forma organizada las diferentes instrucciones que se llaman. Lleva así un rastro de dónde está el programa, en que punto de ejecución nos encontramos.
- Memory Heap. De forma desorganizada se guarda información de las variables y del scope.
- Schedule Tasks. Aquí se agregan a la cola, las tareas programadas para su ejecución.
- Task Queue. Aquí se agregan las tares que ya están listas para pasar al stack y ser ejecutadas. El stack debe estar vacío para que esto suceda.
- MicroTask Queue. Aquí se agregan las promesas. Esta Queue es la que tiene mayor prioridad.

El Event Loop es un loop que está ejecutando todo el tiempo y pasa periódicamente revisando las queues y el stack moviendo tareas entre estas dos estructuras.

- INTERSECTION OBSERVER

Sirve para observar elementos y si cruzan un umbral que nosotros definimos nos lo va a notificar para tomar acción.
El umbral se define por el porcentaje que tiene intersección con el viewport, con la parte visible de nuestra página.
' threshold ' es la funcion que utilizamos para esto y está definido y construido en AutoPause.js 


- VisibilityChange

El visibilityChange forma parte del API del DOM llamado Page Visibility y nos deja saber si el elemento es visible, pude ser usado para ejecutar una acción cuando cambiamos de pestaña. Así podemos ahorrar batería y mejorar la UX.

- Service Workers

Sirven para hacer que nuestras aplicaciones funcionen Offline.
Muy usados en las Progressive Web Apps (PWA) los ServiceWorkers son una capa que vive entre el navegador y el Internet.
Parecido a como lo hacen los proxys van a interceptar peticiones para guardar el resultado en cache y la próxima vez que se haga la petición tomar del cache ese resultado.

-TYPESCRIPT
Es un superset de JavaScript que añade tipos a nuestras variables ayudando así a la detección de errores de forma temprana y mejorando el autocompletado.

-PATRON DE DISEÑO
Son soluciones generales ya probadas dentro de un contexto que las limita a problemas frecuentes que nos encontramos en el desarrollo de software

-PATRONES

 +Creacionales. Proveen diferentes mecanismos para crear objetos.
 +Estructurales. Describen formas de componer objetos para formar nuevas estructuras flexibles y eficientes.
 +De Comportamiento. Gestionan algoritmos y responsabilidades entre objetos.

 -PATRÓN SINGLETON
  Es un patrón que te asegura que una clase solo tiene una instancia. Esta única instancia puede ser consumida por cualquier otro objeto.